# Local configurations -*- mode: sh -*-

# Theme
if (( $+commands[starship] )) && [ -z "$INSIDE_EMACS" ]; then
        # Load starship theme (requires nerd fonts)
    eval "$(starship init zsh)"
else
    # Load the pure theme, with zsh-async library that's bundled with it.
    zinit ice depth"1" pick"async.zsh" src"pure.zsh"
    zinit light sindresorhus/pure
fi

# Plugins
# zinit wait lucid for \
    #       OMZP::python \
    #       OMZP::golang \
    #       OMZP::ruby \
    #       OMZP::rbenv \
    #       OMZP::rails \
    #       OMZP::rust

# zinit as"completion" wait lucid for \
    #       OMZP::docker/_docker \
    #       OMZP::rust/_rustc

# Show system information
# (( $+commands[neofetch] )) && neofetch

# iTerm2 shell integration
# if test -e "${HOME}/.iterm2_shell_integration.zsh"; then
#     source "${HOME}/.iterm2_shell_integration.zsh"
# fi

# For Emacs vterm
if [ -n "$INSIDE_EMACS" ]; then
    DISABLE_AUTO_TITLE="true"
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#525252'

    # VTerm
    if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
        vterm_printf() {
            if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
                # Tell tmux to pass the escape sequences through
                printf "\ePtmux;\e\e]%s\007\e\\" "$1"
            elif [ "${TERM%%-*}" = "screen" ]; then
                # GNU screen (screen, screen-256color, screen-256color-bce)
                printf "\eP\e]%s\007\e\\" "$1"
            else
                printf "\e]%s\e\\" "$1"
            fi
        }

        alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
    fi
fi

# Env
# export EDITOR=vim
# PROXY=http://127.0.0.1:7897
# setproxy

# Aliases
[[ $OSTYPE == darwin* ]] && alias flush_dns='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'

# Homebrew
if [[ $OSTYPE == darwin* ]]; then
    # For Apple Silicon CPU
    [[ $CPUTYPE == arm* ]] && eval "$(/opt/homebrew/bin/brew shellenv)"

    function set_homebrew_env()
    {
        # Mirrors: https://mirrors.ustc.edu.cn/, https://mirrors.tnua.tsinghua.edu.cn/
        export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"
        export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.ustc.edu.cn/homebrew-core.git"
        export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"
        export HOMEBREW_API_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles/api"
        export HOMEBREW_PIP_INDEX_URL="https://mirrors.ustc.edu.cn/pypi/simple"
    }

    function set_homebrew_mirror() {
        set_homebrew_env
        brew tap --custom-remote --force-auto-update homebrew/services https://mirrors.ustc.edu.cn/homebrew-services.git
        brew update
    }

    function unset_homebrew_env {
        unset HOMEBREW_API_DOMAIN
        unset HOMEBREW_BREW_GIT_REMOTE
        unset HOMEBREW_CORE_GIT_REMOTE
        unset HOMEBREW_BOTTLE_DOMAIN
        unset HOMEBREW_PIP_INDEX_URL
    }

    function reset_homebrew_mirror() {
        unset_homebrew_env
        git -C "$(brew --repo)" remote set-url origin https://github.com/Homebrew/brew

        BREW_TAPS="$(BREW_TAPS="$(brew tap 2>/dev/null)"; echo -n "${BREW_TAPS//$'\n'/:}")"
        for tap in core cask command-not-found services; do
            if [[ ":${BREW_TAPS}:" == *":homebrew/${tap}:"* ]]; then
                brew tap --custom-remote --force-auto-update "homebrew/${tap}" "https://github.com/Homebrew/homebrew-${tap}"
            fi
        done

        brew update
    }

    # Use mirror env by default
    set_homebrew_env
fi

# Golang
# Go Proxy
export GOPROXY=https://proxy.golang.com.cn,direct
# export GOPROXY=https://goproxy.cn,direct
# export GOPROXY=https://goproxy.io,direct

# Go Private
# export GOPRIVATE=

#PROXY_HOST=10.11.52.47
PROXY_HOST=127.0.0.1
#PROXY_PORT=3213
PROXY_PORT=7890
# toggle_vpn
toggle_vpn() {
  PROXY_HOST=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk 'NR==1 {print $2}'|tr -d "addr:")
  echo "本机 IP $PROXY_HOST"
      if [ -z "$https_proxy" ]; then
          # 如果 http_proxy 未设置，打开它并将其设置为您想要的值
            export https_proxy=http://$PROXY_HOST:$PROXY_PORT http_proxy=http://$PROXY_HOST:$PROXY_PORT all_proxy=socks5://$PROXY_HOST:$PROXY_PORT
            echo "vpn is now set to $http_proxy $https_proxy $all_proxy"
            echo "comand is https_proxy=http://$PROXY_HOST:$PROXY_PORT http_proxy=http://$PROXY_HOST:$PROXY_PORT all_proxy=socks5://$PROXY_HOST:$PROXY_PORT"
      else
          # 如果 http_proxy 已设置，关闭它
          unset https_proxy
          unset http_proxy
          unset all_proxy
          echo "vpn has been unset"
      fi
}
#toggle_vpn

